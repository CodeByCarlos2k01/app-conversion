import streamlit as st
import pandas as pd

if 'challenge1' not in st.session_state:
    st.session_state['challenge1'] = False
    st.session_state['challenge1_Vp1'] = 0.0
    st.session_state['challenge1_Vp2'] = 0.0
    st.session_state['challenge1_Vs1'] = 0.0
    st.session_state['challenge1_Vs2'] = 0.0
    st.session_state['challenge1_Ws'] = 0.0

laminas = pd.DataFrame(data={'a'    : [1.5, 2, 2.5, 3, 3.5, 4, 5], 
                             'secao': [168, 300, 468, 675, 900, 1200, 1880], 
                             'peso' : [0.095, 0.170, 0.273, 0.380, 0.516, 0.674, 1.053]})

secao_condutor = pd.DataFrame(data={'potencia' : [500, 1000, 3000], 
                                    'densidade': [3, 2.5, 2]})

awg = pd.DataFrame(data={'numero' : ['0000', '000', '00', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44'], 
                         'secao'  : [107.2, 85.3, 67.43, 53.48, 42.41, 33.63, 26.67, 21.15, 16.77, 13.30, 10.55, 8.36, 6.63, 5.26, 4.17, 3.31, 2.63, 2.08, 1.65, 1.31, 1.04, 0.82, 0.65, 0.52, 0.41, 0.33, 0.26, 0.20, 0.16, 0.13, 0.10, 0.08, 0.064, 0.051, 0.04, 0.032, 0.0254, 0.0201, 0.0159, 0.0127, 0.01, 0.0079, 0.0063, 0.005, 0.004, 0.0032, 0.0025, 0.002]})


st.title(':blue[ùêíùêûùêúÃßùêöÃÉùê® ùüè]')

st.title('Dimensionamento de um transformador monof√°sico')
st.markdown('O dimensionamento de um transformador monof√°sico serve para garantir que o equipamento seja capaz de atender √†s necessidades espec√≠ficas de um sistema el√©trico, operando com seguran√ßa e efici√™ncia. Esse processo envolve calcular as capacidades el√©tricas adequadas.')
st.divider()

col1, col2 = st.columns(2)

with col1:
    st.subheader('ùêÉùêöùêùùê®ùê¨ ùêùùêû ùêûùêßùê≠ùê´ùêöùêùùêö')
    st.markdown('‚Ä¢ Tens√£o Prim√°ria Vp em Volts')
    st.markdown('‚Ä¢ Tens√£o Secund√°ria Vs em Volts')
    st.markdown('‚Ä¢ Pot√™ncia da carga em VA ou W')
with col2:
    st.subheader('ùêÉùêöùêùùê®ùê¨ ùêùùêû ùê¨ùêöùê¢ÃÅùêùùêö')
    st.markdown('‚Ä¢ N√∫mero de Espiras do Enrolamento Prim√°rio e Secund√°rio')
    st.markdown('‚Ä¢ Bitola do cabo prim√°rio e do cabo secund√°rio')
    st.markdown('‚Ä¢ Tipo de l√¢mina e quantidade')
    st.markdown('‚Ä¢ Dimens√µes do transformador: N√∫cleo e dimens√µes finais, peso.')

st.divider()

st.title('Dados de entrada')

with st.form('challenge1_form'):
    st.subheader('Tens√£o Prim√°ria')
    col1, col2 = st.columns(2)
    Vp1 = col1.number_input("Informe a Tens√£o Prim√°ria do circuito 1 em Volts", min_value = 0.0)
    Vp2 = col2.number_input("Informe a Tens√£o Prim√°ria do circuito 2 em Volts", min_value = 0.0)
    (Vp1, Vp2) = (st.session_state['challenge1_Vp1'], st.session_state['challenge1_Vp2']) if ((Vp1, Vp2) == (0, 0)) else (Vp1, Vp2)

    st.subheader('Tens√£o Secund√°ria')
    col1, col2 = st.columns(2)
    Vs1 = col1.number_input("Informe a Tens√£o Secund√°ria do circuito 1 em Volts", min_value = 0.0)
    Vs2 = col2.number_input("Informe a Tens√£o Secund√°ria do circuito 2 em Volts", min_value = 0.0)
    (Vs1, Vs2) = (st.session_state['challenge1_Vs1'], st.session_state['challenge1_Vs2']) if ((Vs1, Vs2) == (0, 0)) else (Vs1, Vs2)

    st.subheader('Pot√™ncia da Carga')
    Ws = st.number_input("Informe a Pot√™ncia da carga em Volt-Ampere", min_value = 0.0, max_value = 800.0)
    Ws = st.session_state['challenge1_Ws'] if Ws == 0 else Ws

    if (st.form_submit_button('Gerar Resultado') or st.session_state['challenge1']):

        (Vp1, Vp2) = (0.0, max(Vp1, Vp2)) if (0.0 in [Vp1, Vp2]) else (Vp1, Vp2)
        (Vs1, Vs2) = (0.0, max(Vs1, Vs2)) if (0.0 in [Vs1, Vs2]) else (Vs1, Vs2)

        st.session_state['challenge1'] = True
        st.session_state['challenge1_Vp1'], st.session_state['challenge1_Vp2'] = Vp1, Vp2
        st.session_state['challenge1_Vs1'], st.session_state['challenge1_Vs2'] = Vs1, Vs2
        st.session_state['challenge1_Ws'] = Ws

        st.divider()
        st.subheader('C√°lculo do Transformador Monof√°sico (Solu√ß√£o)')
        st.write(f'**Dados do Transformador monof√°sico:**')
        st.latex(fr'f = 50 \ Hz')
        st.latex(fr'W_{2} = {{{Ws}}} \ Va')
        st.latex(fr'V_{1} = {{{Vp1}}}/{{{Vp2}}} \ V')
        st.latex(fr'V_{2} = {{{Vs1}}}/{{{Vs2}}} \ V')

        Wp = round(1.1 * Ws, 2)
        st.latex(fr'- Pot√™ncia \ prim√°ria: W_{1} = 1,1 \cdot W_{2} = 1,1 \cdot ({{{Ws}}}) = {{{Wp}}} \ Va')

        Ip = round(Wp / Vp2, 2)
        st.latex(fr'- Corrente \ prim√°ria: I_{1} = \frac{{W_{1}}}{{V_{1}}} = \frac{{{Wp}}}{{{Vp2}}} = {{{Ip}}} \ A')

        Is = round(Ws / Vs2, 2)
        st.latex(fr'- Corrente \ secund√°ria: I_{2} = \frac{{W_{2}}}{{V_{2}}} = \frac{{{Ws}}}{{{Vs2}}} = {{{Is}}} \ A')

        d = secao_condutor[secao_condutor['potencia'] > Ws]['densidade'].max()
        st.write(f'**Escolhendo-se a densidade de corrente d = {d} A/mm¬≤, obt√©m-se:**')

        Sp = round(Ip / d, 2)
        st.latex(fr'- Sec√£o \ do \ condutor \ prim√°rio: S_{1} = \frac{{I_{1}}}{{d}} = \frac{{{Ip}}}{{{d}}} = {{{Sp}}} \ mm¬≤')
        idx = awg[awg['secao'] >= Sp].shape[0] - 1 
        secao1, n_awg = awg['secao'][idx], awg['numero'][idx]
        st.write(f'**Usa-se fio n.¬∫ {n_awg} (AWG) cuja se√ß√£o √© S‚ÇÅ = {secao1} mm¬≤**')

        Ss = round(Is / d, 2)
        st.latex(fr'- Sec√£o \ do \ condutor \ secund√°rio: S_{2} = \frac{{I_{2}}}{{d}} = \frac{{{Is}}}{{{d}}} = {{{Ss}}} \ mm¬≤')
        idx = awg[awg['secao'] >= Ss].shape[0] - 1 
        secao2, n_awg = awg['secao'][idx], awg['numero'][idx]
        st.write(f'**Usa-se fio n.¬∫ {n_awg} (AWG) cuja se√ß√£o √© S‚ÇÇ = {secao2} mm¬≤**')

        st.write('**N.B. Em ambos os enrolamentos a densidade de corrente resulta inferior ou igual √† prevista, isto √©:**')
        dp = round(Ip / secao1, 2)
        st.latex(fr'd‚ÇÅ = \frac{{I‚ÇÅ}}{{S‚ÇÅ}} = \frac{{{Ip}}}{{{Sp}}} = {{{dp}}} \ A/mm¬≤')
        ds = round(Is / secao2, 2)
        st.latex(fr'd‚ÇÇ = \frac{{I‚ÇÇ}}{{S‚ÇÇ}} = \frac{{{Is}}}{{{Ss}}} = {{{ds}}} \ A/mm¬≤')
        st.write('**Para o c√°lculo da perda no cobre considera-se a densidade m√©dia de:**')
        d_mean = round((dp + ds) / 2, 2)
        st.latex(fr'd = {{{d_mean}}} \ A/mm¬≤')